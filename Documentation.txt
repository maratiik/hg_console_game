##### Map.py #####



### class Room ###



# Аттрибуты #

room_id - str, название комнаты
neighbors - dict, соседи комнаты, в key лежит комната,
в value лежит dict, в котором key - сосед, а value - 0/i,
0 - int, комната закрыта, i - открыта (нужен ключ i для открытия)

### class Map ###

# Аттрибуты #

rooms - объект класса Room
loot - dict, в key - комната, в value - ее лут
npcs - dict, в key - комната, в value - NPC в ней

# Методы #

_add_room(self, room) - добавляет комнату room
_add_lock(self, room1, room2, locked = 0) - добавляет замок
_show_map(self) - принтит карту



##### NPC.py #####



### class NPC ###



# Аттрибуты #

karma - int, карма:
>50 - не можешь получать информацию с злых npc
>100 - ты герой, все злые npc атакуют
0 - нейтрально
<-50 - не можешь получать информацию с добрых npc
<-100 - ты антигерой, все добрые npc атакуют

loot - list, снаряжение NPC
location - str, локация на карте
game_map - игровая карта
hp - int, здоровье
damage - int, урон

# Методы #

_die(self) - протокол смерти npc, он пропадает из комнаты, оставляя только свой лут
_talk(self, player) - протокол разговора
_set_location(self, location) - меняет локацию



### class Warrior ###



# Аттрибуты #

name - str, имя



##### Player.py #####



### class Player ###



# Постоянные #

KARMA_GAP = 100 - разница в карме, при которой npc атакует без разговоров

# Аттрибуты #

name - str, имя
loot - list, инвентарь
location - str, локация
karma - int, карма
game_map - игровая карта
max_hp - int, максимальное количество здоровья
hp - int, текущее здоровье
damage - int, урон
protectiveness - int, защита (во время боя считать, что + к здоровью)
crit_chance - float, шанс ударить критический урон (0-1)
crit_damage - int, критический урон
level - int, уровень
xp - int, текущий опыт
xp_to_level_up - int, опыт, необходимый для получения нового уровня
talent_points - int, количество непотраченных очков таланта
talents - list, таланты
attribute_term - list, [int, int, float, int, int], слагаемые аттрибутов талантов, распределенные по типам:
0 - плюс к дамагу
1 - плюс к здоровью
2 - плюс к шансу крита
3 - плюс к крит дамагу
4 - плюс к баффу зелий
Когда талант прокачивается, к нему добавляется attribute_term в зависимости от типа.

# Методы #
show_stats(self) - принтит статы
show_map(self) - принтит карту
show_location(self) - принтит текущую локацию
show_loot(self) - принтит лут в комнате
show_inventory(self) - принтит инвентарь
show_talents(self) - принтит таланты
move(self, room) - перемещает игрока в комнату, если она является соседней
interact(self, npc) - взаимодействует с npc, если он находится в той же комнате, что и игрок
fight(self, npc) - атакует npc
drop_item(self, item) - выкидывает предмет в комнату, если таковой предмет есть в инвентаре
take_item(self, item) - берет предмет из комнаты, если таковой предмет там есть
enhance_talent(self, talent_name) - прокачивает талант
add_xp(self, xp) - добавляет опыт
level_up(self) - добавляет уровень



### class Talent ###



# Аттрибуты #

attributes - list, [0, 0, 0, 0, 0], здесь хранятся уровни талантов
name - str, название таланта
type - int, тип таланта (см. attribute_term)
description - str, описание таланта
attribute - int/float, уровень таланта

# Методы #

update_attribute(self) - обновляет аттрибут








##### Map initialisation #####

# game_map = Map()
# game_map._add_room('name')
# game_map._add_lock('name1', 'name2', 0/1)

##### Player initialisation #####
# player = Player('name', game_map)
# player.location = 'location'
# player.loot.append(item)

##### NPC initialisation #####
# NPC_name = Warrior('name', karma, game_map)
# NPC_name.loot = [] or NPC_name.loot.append(items)
# NPC_name.set_location('location')
# NPC_name.health = 0
# NPC_name.damage = 0

##### Talent initialisation #####
# Talent_name = Talent('name', talent_type)
# Talent_name.description = 'description'

##### Item initialisation #####
Item_name = Item('name')